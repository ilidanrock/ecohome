// ---------- Generators & datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Role {
  USER
  ADMIN
  NULL
}

enum PaymentStatus {
  PAID
  UNPAID
}

// ---------- Modelos NextAuth ----------
model User {
  id            String   @id @default(cuid())
  name          String? 
  surname       String?
  email         String   @unique
  password      String?
  role          Role     @default(NULL)

  emailVerified DateTime?
  image         String?

  accounts      Account[]
  // --- Relaciones EcoHome ---
  rentals            Rental[]
  managedProperties  Property[] @relation("AdminProperties")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String @unique
  token      String
  expires    DateTime

  @@id([identifier])
}

// ---------- Modelos EcoHome ----------
model Property {
  id          String    @id @default(uuid())
  name        String
  address     String

  // admins N : M
  administrators  User[]        @relation("AdminProperties")
  // contratos / lecturas / facturas
  rentals         Rental[]
  electricityBills ElectricityBill[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rental {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

  startDate  DateTime
  endDate    DateTime?

  consumptions Consumption[]
  invoices     Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, propertyId])
}

model Consumption {
  id            String   @id @default(uuid())
  rental        Rental   @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  rentalId      String

  month         Int
  year          Int

  energyReading Decimal  @db.Decimal(10,3)   // kWh
  meterImageUrl String?
  extractedAt   DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([rentalId, month, year])
  @@index([year, month])
}

model ElectricityBill {
  id           String   @id @default(uuid())
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId   String

  periodStart  DateTime
  periodEnd    DateTime
  totalKWh     Decimal  @db.Decimal(10,3)
  totalCost    Decimal  @db.Decimal(12,2)
  fileUrl      String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Invoice {
  id           String        @id @default(uuid())
  rental       Rental        @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  rentalId     String

  month        Int
  year         Int

  waterCost    Decimal       @db.Decimal(12,2)
  energyCost   Decimal       @db.Decimal(12,2)
  totalCost    Decimal       @db.Decimal(12,2)

  status       PaymentStatus @default(UNPAID)
  paidAt       DateTime?
  receiptUrl   String?
  invoiceUrl   String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([rentalId, month, year])
  @@index([status])
}
